#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app             = require('../app');
const debug           = require('debug')('etl-scripts-recovery:server');
const http            = require('http');
const channel         = 'log';
const RedisPubSub     = require('../app/redis-pub-sub');
const RedisPubSubInst = new RedisPubSub();

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
const io = require('socket.io')(server);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

RedisPubSubInst.listen().on('message', (ch, logMessage) => {
	io.emit(ch, logMessage);
});

RedisPubSubInst.subscribe(channel);
io.on('connection', onPubSub);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort (val) {
	var port = parseInt(val, 10);
	
	if (isNaN(port)) {
		// named pipe
		return val;
	}
	
	if (port >= 0) {
		// port number
		return port;
	}
	
	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError (error) {
	if (error.syscall !== 'listen') {
		throw error;
	}
	
	var bind = typeof port === 'string'
		? 'Pipe ' + port
		: 'Port ' + port;
	
	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening () {
	var addr = server.address();
	var bind = typeof addr === 'string'
		? 'pipe ' + addr
		: 'port ' + addr.port;
	console.log('Listening on ' + bind);
}

/**
 * Event listener for Socket.io server "connection" event.
 */
function onPubSub (socket) {
	console.log('PubSub ready');
	socket.on('disconnect', () => {
		console.log('user disconnected');
	});
}
